# Devina Kachorin et Julieta María Fonseca Nava
# 17 décembre 2023
# Exercice POO Partie 3

import random

def de():
    list = []
    for i in range (1,4):
        list.append(random.randint(1,6))

    number1 = (max(list))
    list.remove(number1)
    number2 = (max(list))
    list.remove(number2)
    number3 = (max(list))
    list.remove(number3)
    return number1 + number2 + number3


class NPC():
   def __init__(self, nom, race, espece, profession):
       self.force = de()
       self.agility = de()
       self.constitution = de()
       self.intelligence = de()
       self.sagesse = de()
       self.charisme = de()
       self.classe_armure = random.randint(1,12)
       self.nom = nom
       self.race = race
       self.espece = espece
       self.point_de_vie = random.randint(1,20)
       self.profession = profession

   def afficher_caracteristiques(self):
       print(f"Nom: {self.nom}, Race: {self.race}, Espèce: {self.espece}, Profession: {self.profession}")
       print(f"Points de vie: {self.point_de_vie}, Classe d'armure: {self.classe_armure}, Constitution: {self.constitution}, Force: {self.force}\n"
             f"Agilité: {self.agility}, Intelligence: {self.intelligence}, Sagesse: {self.sagesse}, Charisme: {self.charisme}\n")


class Kobold(NPC):
   def attaquer(self, cible):
       print(f"{self.nom} attaque {cible.nom}!")

   def subir_dommage(self, dommage):
       self.point_de_vie -= (self.classe_armure - dommage)
       print(f"{self.nom} subit {dommage} points de dommage!")
       print(f"Le niveau de vie est de {self.point_de_vie}")

class Hero(NPC):
   def attaquer(self, cible):
       attaque = random.randint(1,20)
       print(f"{self.nom} lance un dé à 20 faces et obitent le nombre {attaque}!")

       if attaque == 20:
           print("C'est une attaque critique!")
           dommage = random.randint(1,8)
           cible.subir_dommage(dommage)

       elif attaque == 1:
           print("C'est une attaque ratée!")
           return


       elif (attaque > 1) and (attaque < 20):
           if attaque >= self.classe_armure:
               print("C'est une attaque réussie!")
               dommage = random.randint(1, 6)
               cible.subir_dommage(dommage)
               print(f"Force de la cible: {cible.point_de_vie}")

           else:
               print("Le coup n'a pas fonctionné!")

   def subir_dommage(self, dommage):
       self.point_de_vie -= (self.classe_armure - dommage)
       print(f"{self.nom} subit {dommage} points de dommage!")
       print(f"Le niveau de vie est de {self.point_de_vie}")


kobold = Kobold(nom = "Kobold #1", race = "Kobold", espece = "Monstre", profession = "Voleur")
hero = Hero(nom = "Héro #1", race = "Humain", espece = "Héro", profession = "Guerrier")

kobold.afficher_caracteristiques()
hero.afficher_caracteristiques()
hero.attaquer(kobold)
kobold.subir_dommage(6)
